version: '3.9' # optional since v1.27.0
services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.4
    container_name: ${COMPOSE_PROJECT_NAME}_traefik
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - '--api.insecure=true'
      - '--api=true'
      - '--api.dashboard=true'
      - '--providers.docker'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
    ports:
      # The HTTP port
      - '80:80'
      - '443:443'
      - '8080:8080'
      # The Web UI (enabled by --api.insecure=true)
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      vpcbr:
    labels:
      - traefik.http.routers.traefik=true
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_traefik.rule=Host(`traefik.${COMPOSE_URL}`)

  # mongo:
  #   image: mongo:4.4
  #   container_name: ${COMPOSE_PROJECT_NAME}_db
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: toor
  #     MONGO_INITDB_DATABASE: strapi
  #     MONGO_USER: manta
  #     MONGO_PASSWORD: loch
  #     MONGO_DB: ocean
  #   volumes:
  #     - ../apps/mongo:/data/db
  #     - ../setup/mongo:/backup
  #   networks:
  #     vpcbr:

  # mongo-express:
  #   image: mongo-express
  #   container_name: ${COMPOSE_PROJECT_NAME}_dbadmin
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: toor
  #     ME_CONFIG_MONGODB_URL: mongodb://root:toor@mongo:27017/
  #   networks:
  #     vpcbr:
  #   labels:
  #     - traefik.http.routers.traefik=true
  #     - traefik.http.routers.api.entrypoints=web
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_dbadmin.rule=Host(`db.${COMPOSE_URL}`)

  # strapi:
  #   image: strapi/strapi
  #   container_name: ${COMPOSE_PROJECT_NAME}_strapi
  #   restart: unless-stopped
  #   build:
  #     dockerfile: ./strapi.Dockerfile
  #   # env_file: .env
  #   environment:
  #     - DATABASE_CLIENT=mysql
  #     - DATABASE_HOST=db
  #     - DATABASE_PORT=3306
  #     - DATABASE_NAME=strapi
  #     - DATABASE_USERNAME=strapi
  #     - DATABASE_PASSWORD=strapi
  #     # - AUTHENTICATION_DATABASE: strapi
  #     # JWT_SECRET: ${JWT_SECRET}
  #     # ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
  #     # APP_KEYS: ${APP_KEYS}
  #     # NODE_ENV: ${NODE_ENV}
  #   volumes:
  #     - ../apps/strapi:/srv/app
  #     - ../setup/strapi/database/data.db:/opt/database/data.db
  #     - ../setup/strapi/database/restore.sh:/opt/database/restore.sh
  #     - ../setup/strapi/database/backup.sh:/opt/database/backup.sh
  #     # - ./config:/opt/app/config
  #     # - ./src:/opt/app/src
  #     # - ./package.json:/opt/package.json
  #     # - ./yarn.lock:/opt/yarn.lock
  #     # - ./.env:/opt/app/.env
  #     # - ./public/uploads:/opt/app/public/uploads
  #   ports:
  #     - "1337:1337"
  #   networks:
  #     vpcbr:
  #   labels:
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_strapi.tls=true
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_strapi.entrypoints=web
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_strapi.rule=Host(`cms.${COMPOSE_URL}`)
  #   depends_on:
  #     - db

  # db:
  #   container_name: ${COMPOSE_PROJECT_NAME}_mysql
  #   image: mariadb:10.7
  #   restart: always
  #   command: --default-authentication-plugin=mysql_native_password
  #   environment:
  #     MYSQL_DATABASE: strapi
  #     MYSQL_USER: strapi
  #     MYSQL_PASSWORD: strapi
  #     MYSQL_ROOT_PASSWORD: strapi
  #   volumes:
  #     - ../apps/db:/var/lib/mysql
  #   networks:
  #     vpcbr:
  #   labels:
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_strapi.tls=true
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_strapi.entrypoints=web
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_strapi.rule=Host(`db.${COMPOSE_URL}`)

  # node:
  #   image: node:hydrogen-slim
  #   mem_limit: 2G
  #   working_dir: /home/node
  #   command: sh -c 'yarn && node .'
  #   restart: always
  #   volumes:
  #     - ../apps/node:/home/node
  #   networks:
  #     vpcbr:
  #   labels:
  #     - traefik.http.services.node.loadbalancer.server.port=3000
  #     - traefik.http.routers.node.rule=Host(`api.${COMPOSE_URL}`)

  # auth:
  #   image: node:hydrogen-slim
  #   mem_limit: 2G
  #   working_dir: /home/node
  #   command: sh -c 'yarn && yarn startAuth'
  #   restart: always
  #   volumes:
  #     - ../apps/node:/home/node
  #   networks:
  #     vpcbr:
  #   labels:
  #     - traefik.http.services.auth.loadbalancer.server.port=4000
  #     - traefik.http.routers.auth.rule=Host(`auth.${COMPOSE_URL}`)

  www:
    image: nginx:1.20.1-alpine
    hostname: www
    container_name: ${COMPOSE_PROJECT_NAME}_www
    volumes:
      - ../apps/www/dist:/usr/share/nginx/html
      - ../setup/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      vpcbr:
    labels:
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_www.entrypoints=web
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_www.rule=Host(`www.${COMPOSE_URL}`,`${COMPOSE_URL}`)

  webnode:
    image: node:hydrogen-slim
    container_name: ${COMPOSE_PROJECT_NAME}_webnode
    mem_limit: 2G
    working_dir: /home/node/www
    command: sh -c 'tail -f /dev/null'
    volumes:
      - ../apps/www:/home/node/www

networks:
  vpcbr:
    driver: bridge
    ipam:
      config:
        - subnet: 10.170.1.0/24
          gateway: 10.170.1.1
